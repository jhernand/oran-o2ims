#
# Copyright (c) 2023 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

# This is example shows how to deploy the application inside an ACM global hub.

apiVersion: v1
kind: Template
metadata:
  name: o2ims

parameters:

- name: IMAGE
  description: |
    Reference to the image of the application.
  value: "quay.io/openshift-kni/oran-o2ims:latest"

- name: CLOUD_ID
  description: |
    Identifier of the O-Cloud.
  value: "6575154c-72fc-4ed8-9a87-a81885ab38bb"

- name: BACKEND_URL
  description: |
    Base URL of the non Kubernetes API server of the global hub.
  value: "https://multicluster-global-hub-manager.multicluster-global-hub.svc:8443"

- name: BACKEND_TOKEN
  description: |
    Bearer token used to authenticate to the non Kubernetes API of the
    global hub.

- name: INGRESS_HOST
  description: |
    Host name for the API.

- name: EXTERNAL_ADDRESS
  description: |
    Address of the server as seen from external clients.

objects:

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: client

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: authz
  data:
    acl.yaml: |
      - claim: sub
        pattern: ^system:serviceaccount:o2ims:client$

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: metadata-server

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: metadata-server
    labels:
      app: metadata-server
  spec:
    selector:
      matchLabels:
        app: metadata-server
    replicas: 1
    template:
      metadata:
        labels:
          app: metadata-server
      spec:
        serviceAccountName: metadata-server
        volumes:
        - name: tls
          secret:
            secretName: metadata-server-tls
        containers:
        - name: server
          image: ${IMAGE}
          imagePullPolicy: Always
          volumeMounts:
          - name: tls
            mountPath: /secrets/tls
          comand:
          - /usr/bin/oran-o2ims
          args:
          - start
          - metadata-server
          - --log-level=debug
          - --log-file=stdout
          - --api-listener-address=0.0.0.0:8000
          - --api-listener-tls-crt=/secrets/tls/tls.crt
          - --api-listener-tls-key=/secrets/tls/tls.key
          - --cloud-id=${CLOUD_ID}
          - --external-address=https://o2ims.${INGRESS_HOST}
          ports:
          - name: api
            protocol: TCP
            containerPort: 8000

- apiVersion: v1
  kind: Service
  metadata:
    name: metadata-server
    labels:
      app: metadata-server
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: metadata-server-tls
  spec:
    selector:
      app: metadata-server
    ports:
    - name: api
      port: 8000
      targetPort: api

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: deployment-manager-server

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: o2ims-deployment-manager-server-admin
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: admin
  subjects:
  - kind: ServiceAccount
    namespace: o2ims
    name: deployment-manager-server

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: deployment-manager-server
    labels:
      app: deployment-manager-server
  spec:
    selector:
      matchLabels:
        app: deployment-manager-server
    replicas: 1
    template:
      metadata:
        labels:
          app: deployment-manager-server
      spec:
        serviceAccountName: deployment-manager-server
        volumes:
        - name: tls
          secret:
            secretName: deployment-manager-server-tls
        - name: authz
          configMap:
            name: authz
        containers:
        - name: server
          image: ${IMAGE}
          imagePullPolicy: Always
          volumeMounts:
          - name: tls
            mountPath: /secrets/tls
          - name: authz
            mountPath: /configmaps/authz
          comand:
          - /usr/bin/oran-o2ims
          args:
          - start
          - deployment-manager-server
          - --log-level=debug
          - --log-file=stdout
          - --api-listener-address=0.0.0.0:8000
          - --api-listener-tls-crt=/secrets/tls/tls.crt
          - --api-listener-tls-key=/secrets/tls/tls.key
          - --authn-jwks-url=https://kubernetes.default.svc/openid/v1/jwks
          - --authn-jwks-token-file=/run/secrets/kubernetes.io/serviceaccount/token
          - --authn-jwks-ca-file=/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - --authz-acl-file=/configmaps/authz/acl.yaml
          - --cloud-id=${CLOUD_ID}
          - --backend-url=${BACKEND_URL}
          - --backend-token=${BACKEND_TOKEN}
          - |
            --extensions={
              "country": .metadata.labels["country"],
              "version": .metadata.labels["openshiftVersion"],
              "hub": .metadata.annotations["global-hub.open-cluster-management.io/managed-by"]
            }
          ports:
          - name: api
            protocol: TCP
            containerPort: 8000

- apiVersion: v1
  kind: Service
  metadata:
    name: deployment-manager-server
    labels:
      app: deployment-manager-server
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: deployment-manager-server-tls
  spec:
    selector:
      app: deployment-manager-server
    ports:
    - name: api
      port: 8000
      targetPort: api

- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: api
    annotations:
      route.openshift.io/termination: reencrypt
  spec:
    rules:
    - host: o2ims.${INGRESS_HOST}
      http:
        paths:
        - path: /o2ims-infrastructureInventory/v1/deploymentManagers
          pathType: Prefix
          backend:
            service:
              name: deployment-manager-server
              port:
                name: api
        - path: /
          pathType: Prefix
          backend:
            service:
              name: metadata-server
              port:
                name: api
